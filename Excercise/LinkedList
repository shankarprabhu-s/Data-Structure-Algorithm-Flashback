package Excercise;

import java.util.HashSet;
import java.util.Set;

import org.w3c.dom.Node;

public class LinkedList {
    public Node findMiddleNode()

    {
        if (head == null)
            return null;
        if (head.next == null)
            return head;
        Node fast = head;
        Node slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;

    }

    public boolean hasLoop() {
        if (head == null)
            return false;
        if (head.next == null)
            return false;
        Node fast = head;
        Node slow = head;
        while (fast != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow)
                return true;
        }
        return false;
    }
String url = "https://edgeverve.udemy.com/course/data-structures-and-algorithms-java/learn/quiz/5852042#overview";
    public void partitionList(int x) {
        if (head == null)
            return;
        if (head.next == null)
            return;
        Node less = new Node(0);
        Node more = new Node(0);
        Node dummy1 = less;
        Node dummy2 = more;
        Node cur = head;
        while (cur != null) {
            if (cur.value < x) {
                less.next = cur;
                less = less.next;
            } else {
                more.next = cur;
                more = more.next;
            }
            cur = cur.next;
        }
        more.next = null;
        less.next = dummy2.next;
        head = dummy1.next;

    }
     public void removeDuplicates() {
    Set<Integer> set = new HashSet<>();
    Node temp = head;
    Node cur = new Node(0);
    Node dummy =cur;
    while(temp != null)
    {
        if(!set.contains(temp.value))
        {
            set.add(temp.value);
            cur.next = temp;
            cur= cur.next;
        }
        temp = temp.next;
    }
    cur.next = null;
    head = dummy.next;
} 

public int binaryToDecimal() {
    int num = 0;
    Node current = head;
    while (current != null) {
        num = num * 2 + current.value;
        current = current.next;
    }
    return num;
}



	public Node findKthFromEnd(int k)
	{
	    Node fast = head;
	    Node slow = head;
	    for(int i=1;i<=k ;i++)
	    { if(fast == null) return null;
	     	 fast = fast.next;

	    }
	    while(fast != null)
	    {
	        slow = slow.next;
	        fast = fast.next;
	    }
	    return slow;
	}

}


    

public void reverseBetween(int startIndex, int endIndex) {
    if (head == null) return;

    Node dummyNode = new Node(0);
    dummyNode.next = head;
    Node previousNode = dummyNode;

    for (int i = 0; i < startIndex; i++) {
        previousNode = previousNode.next;
    }

    Node currentNode = previousNode.next;

    for (int i = 0; i < endIndex - startIndex; i++) {
        Node nodeToMove = currentNode.next;
        currentNode.next = nodeToMove.next;
        nodeToMove.next = previousNode.next;
        previousNode.next = nodeToMove;
    }

    head = dummyNode.next;
}




